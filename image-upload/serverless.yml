service: serverless
plugins:
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: ${env:AWS_REGION}

custom:
  dotenv:
    include:
      - AWS_S3_BUCKET_NAME
      - AWS_REGION
      - AWS_DYNAMO_DB_TABLE_NAME

resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:AWS_S3_BUCKET_NAME}
    ImageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${env:AWS_S3_BUCKET_NAME}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
              Resource:
                - { "Fn::GetAtt": ["ImagesBucket", "Arn"] }
                - Fn::Join:
                    - ""
                    - - { "Fn::GetAtt": ["ImagesBucket", "Arn"] }
                      - "/*"
              Principal: "*"

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: "user-pool"
        UsernameConfiguration:
          CaseSensitive: false
        Schema:
          - Name: email
            Required: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: "1"
            - Name: verified_phone_number
              Priority: "2"
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: "8"
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: "7"
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - aws.cognito.signin.user.admin
          - profile
        CallbackURLs:
          - https://example.com/callback
          - https://example.com/signout
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
        GenerateSecret: true
        UserPoolId: !Ref CognitoUserPool
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: "image-upload-user-pool-domain"

    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_DYNAMO_DB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - url
                - fileId
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
